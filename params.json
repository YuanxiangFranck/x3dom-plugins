{"name":"X3dom-plugins-api","tagline":"Add a plugins API for X3DOM: example and explanation","body":"# X3DOM Plugins\r\n\r\n## Presentation\r\nIn my project I worked to created new nodes in x3dom, for scientific mesh visualisation and analysis.\r\nI wanted to created some nodes that influence the geometry (color-map, threshold, clip-Plan).\r\n\r\n\r\nI had two goals in mind:\r\n\r\n1. Create a simple interface for the final users: The final node should works like any other x3dom node\r\n2. Create a API that allow one to create a node in x3dom in an importable script (without touching x3dom source code)\r\n\r\n**Example:**\r\n```html\r\n<TriangleSet>\r\n  <Threshold\r\n     upperBound=\"1\" lowerBound=\"0\" dataName=\"triSetData\" > </Threshold>\r\n  <FloatVertexAttribute\r\n     name=\"triSetData\" numComponents=\"1\" value=\"...\"> </FloatVertexAttribute>\r\n  ...\r\n</TriangleSet>\r\n```\r\nThis allow one to easily change the bound or change the set of data only using setAttribute.\r\n\r\n\r\n## Quick start\r\nDemo on :\r\n[**http://yuanxiangfranck.github.io/**](http://yuanxiangfranck.github.io/)\r\n\r\nIn order to build the example :\r\n\r\n1. clone the repository\r\n\r\n2. run : **python server.py**\r\n\r\n3. open in browser [**http://localhost:8000/index.html**](http://localhost:8000/index.html)\r\n\r\n\r\n## x3dom API\r\n\r\nMy solution was to create a new node: CustomAttributeNode.\r\nThis node is a generic node to add uniforms, varying and shader parts into x3dom.\r\nThe data of the geometry are set using the x3dom node : FloatVertexAttribute.\r\n\r\n**Example of CustomAttributeNode to create a threshold node.**\r\n```html\r\n<CustomAttributeNode\r\n   vertexShaderPartMain=\"v_data = custom_data;\"\r\n   fragmentShaderPartMain=\"if (v_data > u_max) {discard;};\"\r\n   >\r\n  <Uniform\r\n     name=\"u_max\" value=\"0\" type=\"float\"></Uniform>\r\n  <Varying\r\n     name=\"v_data\" type=\"float\"></Varying>\r\n</CustomAttributeNode>\r\n<FloatVertexAttribute\r\n   name=\"custom_data\" numComponents=\"1\" value=\"...\">\r\n</FloatVertexAttribute>\r\n```\r\n\r\nThe CustomAttributeNode is the entry point in x3dom for the javascript API.\r\n\r\n## JavaScript API\r\n\r\nThe idea of the my API is to create a new node inherited from CustomAttributeNode.\r\nI wrote some function to make the implementation of the node easier.\r\n\r\n**Example :**\r\n```javascript\r\n\r\nx3dom.registerNodeType(\r\n    \"Threshold\",\r\n    \"Custom\",\r\n    defineClass(\r\n        x3dom.nodeTypes.CustomAttributeNode,\r\n        // Constructor for Threshold\r\n        function (ctx) {\r\n            x3dom.nodeTypes.Threshold.superClass.call(this, ctx);\r\n            /**\r\n             * Defines the upper bound for threshold,\r\n             * values higher than the upper bound will be hidden\r\n             */\r\n            this.addField_SFFloat(ctx, 'upperBound', 0.0);\r\n\r\n            /**\r\n             * Defines the upper bound for threshold\r\n             * values lower than the lower bound will be hidden\r\n             */\r\n            this.addField_SFFloat(ctx, 'lowerBound', 0.0);\r\n\r\n            /**\r\n             * Defines the data associated to each vertices\r\n             */\r\n            this.addField_SFString(ctx, 'dataName', []);\r\n\r\n        },\r\n        {\r\n            /**\r\n             * Function called in the creation of the nodes\r\n             */\r\n            nodeChanged: function(){\r\n                // Add the unfiforms\r\n                this.addUniform(\"thresholdUpperBoundUniform\",\r\n                                this.get(\"upperBound\"),\"float\");\r\n                this.addUniform(\"thresholdLowerBoundUniform\",\r\n                                this.get(\"lowerBound\"),\"float\");\r\n                // Add the varying\r\n                this.addVarying(\"thresholdDataVarying\",\"float\");\r\n                // Add the shader\r\n                this.addVertexShaderPart(\r\n                    \"thresholdDataVarying = \"+this.get(\"dataName\")+\";\");\r\n                this.addFragmentShaderPart(\r\n                    \"if (thresholdDataVarying > thresholdUpperBoundUniform) {discard;}; \"+\r\n                        \"if (thresholdDataVarying < thresholdLowerBoundUniform) {discard;}; \");\r\n\r\n            },\r\n            /**\r\n             * Function call by setAttribute\r\n             */\r\n            fieldChanged: function (fieldName) {\r\n                if (fieldName === \"lowerBound\" )\r\n                    this.updateUniform(fieldName, \"thresholdLowerBoundUniform\");\r\n                else if(fieldName === 'upperBound')\r\n                    this.updateUniform(fieldName, \"thresholdUpperBoundUniform\");\r\n                else if (fieldName === \"dataName\")\r\n                    this.attributeNameChanged(fieldName);\r\n            }\r\n        }\r\n    )\r\n);\r\n```\r\n\r\nTo add the plugins in the project add the line :\r\n```javascript\r\nrequire('./threshold.js').new_node(x3dom);\r\n```\r\nAfter loading x3dom\r\n\r\n\r\n## working with npm\r\ninstall the packages with : **npm install**\r\n\r\nuse browserify with : **npm run build**\r\n\r\nuse watchify with : **npm run watch**\r\n\r\nrun server + watchify with : **npm run start**\r\n\r\n\r\n*NOTE*:  Here I worked with npm and use a trick to add x3dom, but with small modifications it should work without it.\r\n\r\n\r\n## Comments\r\n\r\n### x3dom\r\nI here I used a custom version of x3dom, with the CustomAttributeNode implemented\r\nI am also working on the top of a branch (pull request #610 ) in x3dom in order to use FloatVertexAttribute.\r\n\r\nfork on [https://github.com/YuanxiangFranck/x3dom](https://github.com/YuanxiangFranck/x3dom)\r\n\r\n### Uniform node\r\nIn the CustomAttributeNode I used the x3dom node Uniform, I will changed it for a custom node.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}